# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10YrRW6CqpyboijRRbHudvH4NrwCgQnak
"""

print('hi')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report

# Load datasets
heart_data = pd.read_csv('heart.csv')
kidney_data = pd.read_csv('kidney_disease.csv')

def preprocess_data(df, target_column):
    df = df.dropna().copy()

    if target_column not in df.columns:
        print(f"Error: Column '{target_column}' not found in dataset.")
        print("Available columns:", df.columns)
        return None, None, None, None

    label_encoders = {}
    for col in df.select_dtypes(include=['object']).columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        label_encoders[col] = le

    X = df.drop(columns=[target_column])
    y = df[target_column]
    return train_test_split(X, y, test_size=0.2, random_state=42)

def train_and_evaluate(df, target_column):
    X_train, X_test, y_train, y_test = preprocess_data(df, target_column)
    if X_train is None or X_train.empty:
        print("Error: Training set is empty. Please check data preprocessing.")
        return

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    print(f'Accuracy for {target_column}:', accuracy_score(y_test, y_pred))
    print(classification_report(y_test, y_pred))

# Train and evaluate models
print("Heart Disease Prediction")
train_and_evaluate(heart_data, 'target')

print("Kidney Disease Prediction")
if 'classification' in kidney_data.columns:
    le = LabelEncoder()
    kidney_data['classification'] = le.fit_transform(kidney_data['classification'].astype(str))
    train_and_evaluate(kidney_data, 'classification')
else:
    print("Error: 'classification' column not found in kidney dataset.")

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score
from imblearn.over_sampling import SMOTE
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
import warnings
warnings.filterwarnings("ignore")

# Load the dataset
df = pd.read_csv("Indian Liver Patient Dataset (ILPD).csv")

# ✅ Correct label mapping: 1 = patient, 2 = no disease
df['is_patient'] = df['is_patient'].map({1: 1, 2: 0})

# Encode 'gender'
df['gender'] = LabelEncoder().fit_transform(df['gender'].astype(str))

# Drop rows with missing values
df = df.dropna()

# Feature engineering
df['albumin_ratio'] = df['albumin'] / (df['tot_proteins'] + 1e-5)
df['bilirubin_ratio'] = df['direct_bilirubin'] / (df['tot_bilirubin'] + 1e-5)
df['enzyme_ratio'] = df['sgot'] / (df['sgpt'] + 1e-5)

# Features and target
X = df.drop(columns=['is_patient'])
y = df['is_patient']

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, stratify=y, random_state=42
)

# Balance classes using SMOTE
smote = SMOTE(random_state=42)
X_train, y_train = smote.fit_resample(X_train, y_train)

# Build ANN model
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.3),
    Dense(32, activation='relu'),
    Dropout(0.2),
    Dense(1, activation='sigmoid')
])
model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])

# Train model
model.fit(X_train, y_train, epochs=100, batch_size=16, verbose=0)

# Predict and evaluate
y_pred = (model.predict(X_test) > 0.5).astype(int).flatten()

print("=== Liver Disease Prediction (ANN with Label Fix) ===")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("F1 & Class Report:\n", classification_report(y_test, y_pred))
print("ROC-AUC Score:", roc_auc_score(y_test, y_pred))

# ✅ Install required package
!pip install imbalanced-learn --quiet

# ✅ Import libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from imblearn.over_sampling import SMOTE
import warnings
warnings.filterwarnings('ignore')

# ✅ Define generic training function
def preprocess_and_train(df, target_column, name, engineered_features_fn=None):
    df = df.dropna().copy()

    for col in df.select_dtypes(include=['object']).columns:
        df[col] = LabelEncoder().fit_transform(df[col].astype(str))

    if engineered_features_fn:
        df = engineered_features_fn(df)

    if target_column not in df.columns:
        print(f"❌ {name}: target column '{target_column}' not found.")
        return

    X = df.drop(columns=[target_column])
    y = df[target_column]

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, y, test_size=0.2, random_state=42, stratify=y
    )

    smote = SMOTE(random_state=42)
    X_train, y_train = smote.fit_resample(X_train, y_train)

    model = RandomForestClassifier(n_estimators=150, max_depth=10, class_weight='balanced', random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    print(f"\n=== {name} Prediction ===")
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))

# ✅ Load and run Heart Disease Prediction
heart_df = pd.read_csv('/content/heart.csv')  # Adjust path if needed
preprocess_and_train(heart_df, 'target', 'Heart Disease')

# ✅ Load and run Kidney Disease Prediction
kidney_df = pd.read_csv('/content/kidney_disease.csv')
if 'classification' in kidney_df.columns:
    kidney_df['classification'] = LabelEncoder().fit_transform(kidney_df['classification'].astype(str))
    preprocess_and_train(kidney_df, 'classification', 'Kidney Disease')
else:
    print("❌ 'classification' column not found in kidney_disease.csv.")

# ✅ Load and run Liver Disease Prediction
liver_df = pd.read_csv("/content/Indian Liver Patient Dataset (ILPD).csv")
liver_df['is_patient'] = liver_df['is_patient'].map({1: 1, 2: 0})

def liver_feature_engineering(df):
    df['gender'] = LabelEncoder().fit_transform(df['gender'].astype(str))
    df['albumin_ratio'] = df['albumin'] / (df['tot_proteins'] + 1e-5)
    df['bilirubin_ratio'] = df['direct_bilirubin'] / (df['tot_bilirubin'] + 1e-5)
    df['enzyme_ratio'] = df['sgot'] / (df['sgpt'] + 1e-5)
    return df

preprocess_and_train(liver_df, 'is_patient', 'Liver Disease', engineered_features_fn=liver_feature_engineering)

